//includeConfig "$projectDir/conf/aws_batch.config"

manifest {
  name = 'MaAsLin2 Pipeline in nextflow'
  author = 'Xiandong Meng'
  homePage = 'https://github.com/FischbachLab/nf-maaslin2'
  description = 'MaAsLin2 is the next generation of MaAsLin (Microbiome Multivariable Association with Linear Models).'
  mainScript = 'main.nf'
  version = '0.0.1'
  defaultBranch = 'main' //github branch name
}

params {
 /*
 * Defines the pipeline inputs parameters (giving a default value for each for them)
 * Each of the following parameters can be specified as command line options
 */
 /* 	Initialization
  --------------------------------*/
  project = "TEST"
  ANALYSIS_METHOD = "LM"
  TRANSFORM ="AST"
  STANDARDIZE = true
  group_name = "Tac_pre"
  metadata = "s3://nextflow-pipelines/nf-maaslin2/data/metadata.tsv"
  input_path =  "s3://nextflow-pipelines/nf-maaslin2/data/metaphlan_abundance_profiles.tsv" // default input data path
  output_path = "s3://genomics-workflow-core/Results/maaslin2"
  docker_container_maaslin2 = "458432034220.dkr.ecr.us-west-2.amazonaws.com/biobakery-maaslin:latest" //"fischbachlab/biobakery-maaslin"
  docker_container_hclust2 = "quay.io/biocontainers/hclust2:0.98.3d589ab--py27_0"  
}


//profiles {
//      standard {
//         process.executor = 'local'
//         docker.enabled = true
//      }
// }

/*
process {
  maxRetries = 0
  executor = 'awsbatch'
	queue = "default-maf-pipelines"
	cleanup = true
  cache = false

  //errorStrategy = 'ignore'

//  withName: Maaslin2 {
//    time =  1.hour
//		cpus = {8 * task.attempt}
//		memory = {8.GB  * task.attempt}
//    errorStrategy = { task.exitStatus in [104,134,137,138,139,140,143] ? 'retry' : 'ignore' }
//  }
}
*/

aws {
  region = "us-west-2"
}
docker.enabled = true 

profiles {
 awsbatch { process.executor = 'awsbatch' process.queue = "default-maf-pipelines" includeConfig "$projectDir/conf/aws_batch.config" }
 debug { process.beforeScript = 'echo $HOSTNAME' }
 docker { docker.enabled = true }
  //singularity { singularity.enabled = true }
 // test { includeConfig 'conf/test.config' }
 local { executor='local' docker.enabled=true }
}


timeline {
  enabled = false
  overwrite = true
  file = "$params.output_path/$params.project/execution_reports/timeline.html"
}

report {
  enabled = false
  overwrite = true
  file = "$params.output_path/$params.project/execution_reports/report.html"
}

dag {
    enabled = false
    overwrite = true
    file = "$params.output_path/$params.project/execution_reports/pipeline_dag.html"
}
